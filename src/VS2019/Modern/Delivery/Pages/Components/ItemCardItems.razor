@page "/ItemCardItems"

@using Delivery.Pages.Components
@inject IItemDataService itemService
@inject ICategoryDataService categoryService


@if (items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="projects-horizontal">
        <div class="container-fuild">
            <div class="intro">
                <h2 class="text-center">@Title</h2>
            </div>
            <div class="row projects">
                @foreach (var item in items)
                {
                    <ItemCard Id="@item.Id" NewItem="@NewItem" OnAdded="@HandleOnAdded" OnDeleted="HandleOnDeleted" OnConfirmDelete="HandleOnConfirmDelete">
                    </ItemCard>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int CategoryNum { get; set; }

    [Parameter]
    public int NewItem { get; set; }

    [Parameter]
    public EventCallback<string> OnAdded { get; set; }

    [Parameter]
    public EventCallback<string> OnDeleted { get; set; }


    private string Title { get; set; }
    private IEnumerable<DeliverySupport.Models.IItemModel> items;
    private DeliverySupport.Models.IItemCategoryModel itemCategory;

    protected override async Task OnInitializedAsync()
    {
        if (CategoryNum > 0)
        {
            itemCategory = await categoryService.GetItemCategoryByCategoryNumAsync(CategoryNum);
            if (itemCategory == null)
                Title = "Unknown Category";
            else
                Title = itemCategory.CategoryDescription;
            items = await itemService.GetItemsByCategoryNumAsync(CategoryNum);
        }
        else
        {
            Title = "All Items";
            items = await itemService.GetItemsAsync();
        }
    }

    public void HandleOnAdded(string msg)
    {
        OnAdded.InvokeAsync(msg);
    }


    public async Task HandleOnDeleted(string msg)
    {
        await OnDeleted.InvokeAsync(msg);
        items = null;
        await OnInitializedAsync();
    }

    public void HandleOnConfirmDelete(string str)
    {

    }


}

